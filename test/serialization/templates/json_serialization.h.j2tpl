{% import "common_macros.j2tpl" as common with context %}
{% macro SerializeBuiltinType(valueRef, typeInfo) %}
    value = {{ valueRef }};
{% endmacro %}

{% macro DeserializeBuiltinType(valueRef, typeInfo) %}
    {% set type=typeInfo.type.type %}
    {% if type == "Bool" %}
    {{ valueRef }} = value.GetBool();
    {% elif type == "Short" or type == "Int" or type == "Long" or type == "LongLong" %}
    {{ valueRef }} = value.GetInt{{ '64' if typeInfo.type.bits >= 64 }}();
    {% else %}
    {% endif %}
{% endmacro %}

{% macro SerializeWellKnownType(valueRef, typeInfo) %}
	{% if typeInfo.type.type == 'StdString' %}
		const auto& str = {{ valueRef }};
		value.SetString(StringRef(str.data(), str.size()));
	{% elif typeInfo.type.type == 'StdVector' or typeInfo.type.type == 'StdArray' or typeInfo.type.type == 'StdList' or typeInfo.type.type == 'StdSet' %}
		value.SetArray();
		for (auto& v : {{ valueRef }})
		{		
			auto& array = value;
			Value value;
			{{ common.ProcessTypedMember(typeInfo.type.arguments[0], 'Serialize', 'v') }}
			array.PushBack(value.Move(), allocator);
		}
	{% else %}
	// Make handler for well-known type {{ typeInfo.type.type }}
	{% endif %}
{% endmacro %}

{% macro DeserializeWellKnownType(valueRef, typeInfo) %}
	{% if typeInfo.type.type == 'StdString' %}
		{{ valueRef }} = value.GetString();
	{% elif typeInfo.type.type == 'StdVector' or typeInfo.type.type == 'StdArray' or typeInfo.type.type == 'StdList' or typeInfo.type.type == 'StdSet' %}
	    const auto& array = value.GetArray();
		for (auto& value : array)
		{		
            {{ typeInfo.type.arguments[0].printedName }} itemValue;
			{{ common.ProcessTypedMember(typeInfo.type.arguments[0], 'Deserialize', 'itemValue') }}
			{{ valueRef }}.insert({{ valueRef }}.end(), std::move(itemValue));
		}
	{% else %}
	// Make handler for well-known type {{ typeInfo.type.type }}
	{% endif %}
{% endmacro %}

{% macro SerializeEnumType(valueRef) %}
	JsonSerialize(value, {{ valueRef }}, allocator);
{% endmacro %}

{% macro DeserializeEnumType(valueRef) %}
	JsonDeserialize(value, {{ valueRef }});
{% endmacro %}

{% macro SerializeRecordType(valueRef) %}
	JsonSerialize(value, {{ valueRef }}, allocator);
{% endmacro %}

{% macro DeserializeRecordType(valueRef) %}
	JsonDeserialize(value, {{ valueRef }});
{% endmacro %}

{% extends "header_skeleton.j2tpl" %}
{% block generator_headers %}
 #include <rapidjson/document.h>
 #include <rapidjson/rapidjson.h>
 #include <algorithm>
 #include <utility>
{% endblock %}

{% block namespaced_decls %}{{super()}}{% endblock %}

{% macro SerializeBuitinType(m, t) %}
	node.AddMember("{{ m.name }}", value.{{ m.name }}, allocator);
{% endmacro %}

{% block global_decls %}
{% for ns in [rootNamespace] recursive %}
{% for enum in ns.enums %}
{% set enumName = enum.name %}
{% set scopeSpec = enum.scopeSpecifier %}
{% set scopedName = scopeSpec ~ ('::' if scopeSpec) ~ enumName %}
{% set prefix = (scopedName + '::') if not enumInfo.isScoped else (scopedName ~ '::' ~ scopeSpec ~ ('::' if scopeSpec)) %}
void JsonSerialize(rapidjson::Value& node, {{ enum.fullQualifiedName }} value, rapidjson::Document::AllocatorType& allocator)
{
    switch (value)
    {
{% for itemName in enum.items | map(attribute="itemName") | sort %}
    case {{prefix}}{{itemName}}:
        node.SetString("{{ itemName }}", allocator);
		break;
{% endfor %}
    }
}

void JsonDeserialize(const rapidjson::Value& node, {{ enum.fullQualifiedName }}& value)
{
    static std::pair<const char*, {{scopedName}}> items[] = {
{% for itemName in enum.items | map(attribute="itemName") | sort %}
        {"{{itemName}}", {{prefix}}{{itemName}} } {{',' if not loop.last }}
{% endfor %}
    };

    const char* itemName = node.GetString();

    auto p = std::lower_bound(begin(items), end(items), itemName,
                      [](auto&& i, auto&& v) {return strcmp(i.first, v) < 0;});
    
    if (p == end(items) || strcmp(p->first, itemName) != 0)
        throw std::invalid_argument(std::string("Bad {{scopedName}} enum item name: ") + itemName);

    value = p->second;
}
{% endfor %}

{% for s in ns.classes %}
void JsonSerialize(rapidjson::Value& node, const {{ s.fullQualifiedName }}& structValue, rapidjson::Document::AllocatorType& allocator)
{
	using namespace rapidjson;

	node.SetObject();
	{% for m in s.members %}
	{
		Value value;
		{{ common.ProcessTypedMember(m.type, 'Serialize', 'structValue.' + m.name) }}
		node.AddMember("{{ m.name }}", value.Move(), allocator);
	}
	{% endfor %}
}

void JsonDeserialize(const rapidjson::Value& node, {{ s.fullQualifiedName }}& structValue)
{
	using namespace rapidjson;

	{% for m in s.members %}
    if (node.HasMember("{{ m.name }}"))
	{
		const Value& value = node["{{ m.name }}"];
		{{ common.ProcessTypedMember(m.type, 'Deserialize', 'structValue.' + m.name) }}
	}
	{% endfor %}
}
{% endfor %}
{{loop(ns.innerNamespaces)}}
{% endfor %}
{% endblock %}

