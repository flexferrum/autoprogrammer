{% import "common_macros.j2tpl" as common with context %}
syntax = "proto3";
{% if env.package_name %}package {{ env.package_name }};{% endif %}

{% macro MakeProtobufName(n) -%}
    {% set name_root = n | replace('::', '_') %}
    {% if env.package_name -%}
    {{- name_root -}}
    {%- else -%}
    {{ name_root }}_pb
    {%- endif -%}
{% endmacro %}

{% macro ProtobufMemberBuiltinType(memberName, typeInfo) %}
    {% set type=typeInfo.type.type %}
    {% if type == "Bool" %}
    bool {{ memberName }}
    {% elif type == "Short" or type == "Int" or type == "Long" or type == "LongLong" %}
    {{ 's' if typeInfo.type.isSigned else 'u' }}int{{ '64' if typeInfo.type.bits >= 64 else '32' }} {{ memberName }}
    {% else %}
    {% endif %}
{% endmacro %}

{% macro ProtobufMemberWellKnownType(memberName, typeInfo) %}
	{% if typeInfo.type.type == 'StdString' %}
        string {{ memberName }}
	{% elif typeInfo.type.type == 'StdVector' or typeInfo.type.type == 'StdArray' or typeInfo.type.type == 'StdList' or typeInfo.type.type == 'StdSet' %}
		repeated {{ common.ProcessTypedMember(typeInfo.type.arguments[0], 'ProtobufMember', memberName) }}
	{% else %}
	// Make handler for well-known type {{ typeInfo.type.type }}
	{% endif %}
{% endmacro %}

{% macro ProtobufMemberEnumType(memberName, type) %}
	{{ MakeProtobufName(type.fullQualifiedName) }} {{ memberName }}
{% endmacro %}

{% macro ProtobufMemberRecordType(memberName, type) %}
	{{ MakeProtobufName(type.fullQualifiedName) }} {{ memberName }}
{% endmacro %}

{% for ns in [rootNamespace] recursive %}
{% for enum in ns.enums %}
enum  {{ MakeProtobufName(enum.fullQualifiedName) }} {
    _pb_DEFAULT = 0;
{% for item in enum.items | map(attribute="itemName") %}
    pb_{{ item }} = {{ loop.index }};     
{% endfor %}
}
{% endfor %}
{% for s in ns.classes %}
message {{ MakeProtobufName(s.fullQualifiedName) }}  {
{% for m in s.members %}
{% set member_decl = common.ProcessTypedMember(m.type, 'ProtobufMember', m.name) | trim %}
{% if member_decl != '' %}{{ member_decl }} = {{ loop.index }};{% endif %}
{% endfor +%}
}
{% endfor %}
{{loop(ns.innerNamespaces)}}
{% endfor %}
